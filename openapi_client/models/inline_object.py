# coding: utf-8

"""
    Bytrox Docs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'network': 'str',
        'webhook_url': 'str',
        'merchant_wallet_id': 'str',
        'merchant_fees': 'bool'
    }

    attribute_map = {
        'currency': 'currency',
        'network': 'network',
        'webhook_url': 'webhookUrl',
        'merchant_wallet_id': 'merchantWalletId',
        'merchant_fees': 'merchantFees'
    }

    def __init__(self, currency=None, network=None, webhook_url=None, merchant_wallet_id=None, merchant_fees=False, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._network = None
        self._webhook_url = None
        self._merchant_wallet_id = None
        self._merchant_fees = None
        self.discriminator = None

        self.currency = currency
        self.network = network
        self.webhook_url = webhook_url
        self.merchant_wallet_id = merchant_wallet_id
        if merchant_fees is not None:
            self.merchant_fees = merchant_fees

    @property
    def currency(self):
        """Gets the currency of this InlineObject.  # noqa: E501

        Криптовалюта создаваемого кошелька  # noqa: E501

        :return: The currency of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineObject.

        Криптовалюта создаваемого кошелька  # noqa: E501

        :param currency: The currency of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def network(self):
        """Gets the network of this InlineObject.  # noqa: E501

        Сеть создаваемого кошелька  # noqa: E501

        :return: The network of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this InlineObject.

        Сеть создаваемого кошелька  # noqa: E501

        :param network: The network of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and network is None:  # noqa: E501
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def webhook_url(self):
        """Gets the webhook_url of this InlineObject.  # noqa: E501

        Адрес для отправки уведомлений об кошельке  # noqa: E501

        :return: The webhook_url of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this InlineObject.

        Адрес для отправки уведомлений об кошельке  # noqa: E501

        :param webhook_url: The webhook_url of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and webhook_url is None:  # noqa: E501
            raise ValueError("Invalid value for `webhook_url`, must not be `None`")  # noqa: E501

        self._webhook_url = webhook_url

    @property
    def merchant_wallet_id(self):
        """Gets the merchant_wallet_id of this InlineObject.  # noqa: E501

        Уникальный идентификатор кошелька  # noqa: E501

        :return: The merchant_wallet_id of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._merchant_wallet_id

    @merchant_wallet_id.setter
    def merchant_wallet_id(self, merchant_wallet_id):
        """Sets the merchant_wallet_id of this InlineObject.

        Уникальный идентификатор кошелька  # noqa: E501

        :param merchant_wallet_id: The merchant_wallet_id of this InlineObject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                merchant_wallet_id is not None and len(merchant_wallet_id) > 120):
            raise ValueError("Invalid value for `merchant_wallet_id`, length must be less than or equal to `120`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                merchant_wallet_id is not None and len(merchant_wallet_id) < 1):
            raise ValueError("Invalid value for `merchant_wallet_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._merchant_wallet_id = merchant_wallet_id

    @property
    def merchant_fees(self):
        """Gets the merchant_fees of this InlineObject.  # noqa: E501

        Логическое значение (true/false), указывающее, платит ли мерчант комиссию за транзакции, если пусто или false - комиссия оплачивается клиентом.  # noqa: E501

        :return: The merchant_fees of this InlineObject.  # noqa: E501
        :rtype: bool
        """
        return self._merchant_fees

    @merchant_fees.setter
    def merchant_fees(self, merchant_fees):
        """Sets the merchant_fees of this InlineObject.

        Логическое значение (true/false), указывающее, платит ли мерчант комиссию за транзакции, если пусто или false - комиссия оплачивается клиентом.  # noqa: E501

        :param merchant_fees: The merchant_fees of this InlineObject.  # noqa: E501
        :type: bool
        """

        self._merchant_fees = merchant_fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
