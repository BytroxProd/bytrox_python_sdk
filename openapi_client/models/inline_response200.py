# coding: utf-8

"""
    Bytrox Docs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse200(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'wallet_uuid': 'str',
        'wallet_address': 'str',
        'currency': 'str',
        'network': 'str',
        'wallet_id': 'str'
    }

    attribute_map = {
        'wallet_uuid': 'wallet_uuid',
        'wallet_address': 'wallet_address',
        'currency': 'currency',
        'network': 'network',
        'wallet_id': 'wallet_id'
    }

    def __init__(self, wallet_uuid=None, wallet_address=None, currency=None, network=None, wallet_id=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse200 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._wallet_uuid = None
        self._wallet_address = None
        self._currency = None
        self._network = None
        self._wallet_id = None
        self.discriminator = None

        self.wallet_uuid = wallet_uuid
        self.wallet_address = wallet_address
        self.currency = currency
        self.network = network
        if wallet_id is not None:
            self.wallet_id = wallet_id

    @property
    def wallet_uuid(self):
        """Gets the wallet_uuid of this InlineResponse200.  # noqa: E501

        Уникальный UUID кошелька, благодаря которому можно управлять кошельком  # noqa: E501

        :return: The wallet_uuid of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._wallet_uuid

    @wallet_uuid.setter
    def wallet_uuid(self, wallet_uuid):
        """Sets the wallet_uuid of this InlineResponse200.

        Уникальный UUID кошелька, благодаря которому можно управлять кошельком  # noqa: E501

        :param wallet_uuid: The wallet_uuid of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and wallet_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `wallet_uuid`, must not be `None`")  # noqa: E501

        self._wallet_uuid = wallet_uuid

    @property
    def wallet_address(self):
        """Gets the wallet_address of this InlineResponse200.  # noqa: E501

        Адрес кошелька  # noqa: E501

        :return: The wallet_address of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._wallet_address

    @wallet_address.setter
    def wallet_address(self, wallet_address):
        """Sets the wallet_address of this InlineResponse200.

        Адрес кошелька  # noqa: E501

        :param wallet_address: The wallet_address of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and wallet_address is None:  # noqa: E501
            raise ValueError("Invalid value for `wallet_address`, must not be `None`")  # noqa: E501

        self._wallet_address = wallet_address

    @property
    def currency(self):
        """Gets the currency of this InlineResponse200.  # noqa: E501

        Валюта кошелька  # noqa: E501

        :return: The currency of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse200.

        Валюта кошелька  # noqa: E501

        :param currency: The currency of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def network(self):
        """Gets the network of this InlineResponse200.  # noqa: E501

        Сеть кошелька   # noqa: E501

        :return: The network of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this InlineResponse200.

        Сеть кошелька   # noqa: E501

        :param network: The network of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and network is None:  # noqa: E501
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def wallet_id(self):
        """Gets the wallet_id of this InlineResponse200.  # noqa: E501

        Уникальный ID кошелька в системе мерчанта  # noqa: E501

        :return: The wallet_id of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this InlineResponse200.

        Уникальный ID кошелька в системе мерчанта  # noqa: E501

        :param wallet_id: The wallet_id of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200):
            return True

        return self.to_dict() != other.to_dict()
